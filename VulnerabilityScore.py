# Vulnerability Score consists of 5 parameters.
# Residence (Map of zip codes with weightage.
# Salary (Number)
# Dependents (Number of dependent people. More dependents, more vulnerable)
# Check-ins (Number of places where a person visits. Parameter is a list of strings)
# Age (Number)

# TODO Increase number of areas and deteremine scaling factor after all parameters and elements are fixed

# Map of area codes with weightage. Highest number for the costliest area.
residence_map = {
    90007: 1,  # USC Area
    90031: 5,  # Beverly Hills
    90017: 3,  # Downtown LA
    91001: 2,  # Pasadena
    90291: 4,  # Santa Monica
}

# Priorities parameter wise with highest number as higher priority
priorities = {'Residence': 5, 'Salary': 4, 'Dependents': 3, 'Check-ins': 2, 'Age': 1}

# TODO Fetch from DB after recognixzing a face to be implemented heres


def fetch_data():
    age = 27
    checkins = {"Jinya Ramen bar", "DisneyLand", "Hollywood walk of Fame", "West field Century City Mall"}
    salary = 700000
    dependents = 2
    residence = 90031

    return residence, salary, dependents, checkins, age

# Assigning a priority numerically for range of salary
def find_salary_range(sal):

    if sal > 0 and sal < 50000:
        normalized_sal = 1
    elif sal >= 50000 and sal < 100000:
        normalized_sal = 2
    elif sal >= 100000 and sal < 200000:
        normalized_sal = 3
    elif sal >= 200000 and sal < 500000:
        normalized_sal = 4
    else:
        normalized_sal = 5

    return normalized_sal

# Assigning a priority numerically for range of ages

def find_age_range(age):

    if age > 0 and age < 20:
        normalized_age = 2
    elif age >= 20 and age < 30:
        normalized_age = 5
    elif age >= 30 and age < 40:
        normalized_age = 4
    elif age >= 40 and age < 50:
        normalized_age = 3
    else:
        normalized_age = 1

    return normalized_age


def calculate_score(res, salary, dependents, checkins, age):
    score = 0
    score += priorities.get('Age') * find_age_range(age)
    score += priorities.get('Check-ins') * len(checkins)
    score += priorities.get('Dependents') * dependents
    score += priorities.get('Salary') * find_salary_range(salary)
    score += priorities.get('Residence') * residence_map[res]

    return score if score > 0 else 0

if __name__ == '__main__':
    res, salary, dependents, checkins, age = fetch_data()
    print ('Vulnerability Score = ' + str(calculate_score(res, salary, dependents, checkins, age)))
